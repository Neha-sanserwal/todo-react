{"version":3,"sources":["Components/Input.js","Components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","state","value","handleChange","bind","event","base","newVal","target","this","setState","prevState","charCode","saveTask","onKeyPress","handleTask","onChange","Component","Task","isCompleted","message","taskId","changeStatus","className","key","onClick","TodoList","tasks","list","Object","keys","map","Todo","lastTodoId","changeTask","task","assign","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"iSAmCeA,G,wDAhCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,yDAQNC,EAAOC,GAClB,IAAMC,EAASF,EAAMG,OAAON,MAC5BO,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BT,MAAOK,Q,iCAIAF,GACc,KAAnBA,EAAMO,UAAwC,KAArBH,KAAKR,MAAMC,QACtCO,KAAKT,MAAMa,SAASJ,KAAKR,MAAMC,OAC/BO,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAAET,MAAO,U,+BAGjC,IAAD,OACP,OACE,2BACEA,MAAOO,KAAKR,MAAMC,MAClBY,WAAY,SAACT,GAAD,OAAW,EAAKU,WAAWV,IACvCW,SAAU,SAACX,GAAD,OAAW,EAAKF,aAAaE,U,GA3B3BY,cCEdC,EAAO,SAAClB,GAAW,IACfmB,EAA+CnB,EAA/CmB,YAAaC,EAAkCpB,EAAlCoB,QAASC,EAAyBrB,EAAzBqB,OAAQC,EAAiBtB,EAAjBsB,aAChCC,EAAYJ,EAAc,WAAa,cAE7C,OACE,yBAAKI,UAAS,gBAAWA,IACvB,yBAAKA,UAAU,cACf,yBACEA,UAAU,UACVC,IAAKH,EACLI,QAAS,kBACPH,EAAa,CAAEH,aAAcA,EAAaC,WAAWC,KAGtDD,KAKHM,EAAW,SAAC1B,GAAW,IACnBsB,EAAwBtB,EAAxBsB,aAAcK,EAAU3B,EAAV2B,MAChBC,EAAOC,OAAOC,KAAKH,GAAOI,KAAI,SAACV,GAAY,IAAD,EACbM,EAAMN,GAA/BD,EADsC,EACtCA,QAASD,EAD6B,EAC7BA,YACjB,OACE,kBAAC,EAAD,CACEK,IAAKH,EACLD,QAASA,EACTD,YAAaA,EACbE,OAAQA,EACRC,aAAcA,OAIpB,OAAO,yBAAKC,UAAU,SAASK,IAwClBI,E,kDApCb,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACX0B,MAAO,GACPM,WAAY,GAEd,EAAKpB,SAAW,EAAKA,SAAST,KAAd,gBAChB,EAAK8B,WAAa,EAAKA,WAAW9B,KAAhB,gBARD,E,qDAWVgB,GACP,IAAMe,EAAO,CAAEf,UAASD,aAAa,GACrCV,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BgB,MAAOE,OAAOO,OAAOzB,EAAUgB,MAAxBE,OAAA,IAAAA,CAAA,GAAkClB,EAAUsB,WAAaE,IAChEF,WAAYtB,EAAUsB,WAAa,Q,iCAI5BE,EAAMd,GACfZ,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BgB,MAAOE,OAAOO,OAAOzB,EAAUgB,MAAxBE,OAAA,IAAAA,CAAA,GAAkCR,EAASc,U,+BAKpD,OACE,yBAAKZ,UAAU,QACb,oCACA,kBAAC,EAAD,CAAUI,MAAOlB,KAAKR,MAAM0B,MAAOL,aAAcb,KAAKyB,aACtD,kBAAC,EAAD,CAAOrB,SAAUJ,KAAKI,gB,GA/BXI,aC5BJoB,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCKce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnC,c","file":"static/js/main.77ee9528.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Input extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event, base) {\n    const newVal = event.target.value;\n    this.setState((prevState) => ({\n      value: newVal,\n    }));\n  }\n\n  handleTask(event) {\n    if (event.charCode === 13 && this.state.value !== \"\") {\n      this.props.saveTask(this.state.value);\n      this.setState((prevState) => ({ value: \"\" }));\n    }\n  }\n  render() {\n    return (\n      <input\n        value={this.state.value}\n        onKeyPress={(event) => this.handleTask(event)}\n        onChange={(event) => this.handleChange(event)}\n      />\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport \"./todo.css\";\nimport Input from \"./Input\";\n\nconst Task = (props) => {\n  const { isCompleted, message, taskId, changeStatus } = props;\n  const className = isCompleted ? \"complete\" : \"un-complete\";\n\n  return (\n    <div className={`task  ${className}`}>\n      <div className=\"indicator\"></div>\n      <div\n        className=\"message\"\n        key={taskId}\n        onClick={() =>\n          changeStatus({ isCompleted: !isCompleted, message }, taskId)\n        }\n      >\n        {message}\n      </div>\n    </div>\n  );\n};\nconst TodoList = (props) => {\n  const { changeStatus, tasks } = props;\n  const list = Object.keys(tasks).map((taskId) => {\n    const { message, isCompleted } = tasks[taskId];\n    return (\n      <Task\n        key={taskId}\n        message={message}\n        isCompleted={isCompleted}\n        taskId={taskId}\n        changeStatus={changeStatus}\n      />\n    );\n  });\n  return <div className=\"tasks\">{list}</div>;\n};\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: {},\n      lastTodoId: 0,\n    };\n    this.saveTask = this.saveTask.bind(this);\n    this.changeTask = this.changeTask.bind(this);\n  }\n\n  saveTask(message) {\n    const task = { message, isCompleted: false };\n    this.setState((prevState) => ({\n      tasks: Object.assign(prevState.tasks, { [prevState.lastTodoId]: task }),\n      lastTodoId: prevState.lastTodoId + 1,\n    }));\n  }\n\n  changeTask(task, taskId) {\n    this.setState((prevState) => ({\n      tasks: Object.assign(prevState.tasks, { [taskId]: task }),\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"todo\">\n        <h1>Todo</h1>\n        <TodoList tasks={this.state.tasks} changeStatus={this.changeTask} />\n        <Input saveTask={this.saveTask} />\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React from \"react\";\nimport \"./App.css\";\nimport Todo from \"./Components/Todo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}