{"version":3,"sources":["Components/Input.js","Components/Task.js","Components/DeleteBtn.js","Components/WithDelete.js","Components/TaskList.js","Components/status.js","Components/TasksHeading.js","Components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","useState","initialValue","value","setValue","className","onKeyPress","event","charCode","handleValue","handleKey","onChange","newVal","target","handleChange","Task","status","message","id","toggleStatus","onClick","key","ComponentToAdd","onDelete","isHovering","setIsHovering","onMouseEnter","onMouseLeave","DeleteBtn","tasks","handleStatus","deleteTask","list","map","task","index","taskId","TaskWithDelete","WithDelete","nextStatus","TasksHeading","editMode","setEditMode","heading","changeHeading","Todo","setHeading","setTasks","lastTodoId","setLastTodoId","HeadingWithDelete","TaskList","currentStatus","tasksCopy","taskToUpdate","find","prevTasks","filter","filterTasks","createNewTask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.daf12ea5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Input = (props) => {\n  const [value, setValue] = useState(props.initialValue);\n\n  const handleChange = (event) => {\n    const newVal = event.target.value;\n    setValue(newVal);\n  };\n\n  const handleKey = (event) => {\n    if (event.charCode === 13 && value !== \"\") {\n      props.handleValue(value);\n      setValue(\"\");\n    }\n  };\n\n  return (\n    <input\n      className={props.className}\n      value={value}\n      onKeyPress={(event) => handleKey(event)}\n      onChange={(event) => handleChange(event)}\n    />\n  );\n};\nexport default Input;\n","import React from \"react\";\nconst Task = (props) => {\n  const { status, message, id, toggleStatus } = props;\n  return (\n    <div className={`task ${status}`} onClick={toggleStatus}>\n      <div className=\"indicator\"></div>\n      <div className=\"message\" key={id}>\n        {message}\n      </div>\n    </div>\n  );\n};\nexport default Task;\n","import React from \"react\";\nexport default (props) => {\n  const { id, onClick } = props;\n  return (\n    <div className=\"delete-btn\" onClick={() => onClick(id)}>\n      X\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport DeleteBtn from \"./DeleteBtn\";\n\nexport default function (ComponentToAdd, onDelete) {\n  return (props) => {\n    const [isHovering, setIsHovering] = useState(false);\n    return (\n      <div\n        className=\"box\"\n        onMouseEnter={() => setIsHovering(true)}\n        onMouseLeave={() => setIsHovering(false)}\n      >\n        <ComponentToAdd {...props} />\n        {isHovering && <DeleteBtn onClick={() => onDelete(props.id)} />}\n      </div>\n    );\n  };\n}\n","import React from \"react\";\nimport Task from \"./Task\";\nimport WithDelete from \"./WithDelete\";\n\nexport default (props) => {\n  const { tasks, handleStatus, deleteTask } = props;\n  const list = tasks.map((task, index) => {\n    const { message, status, taskId } = task;\n    const TaskWithDelete = WithDelete(Task, deleteTask);\n    return (\n      <TaskWithDelete\n        key={index}\n        message={message}\n        status={status}\n        id={taskId}\n        toggleStatus={() => handleStatus(taskId)}\n      />\n    );\n  });\n  return <div className=\"tasks\">{list}</div>;\n};\n","const DUE = \"due\";\nconst PROCESSING = \"processing\";\nconst COMPLETED = \"completed\";\n\nconst nextStatus = {\n  [DUE]: PROCESSING,\n  [PROCESSING]: COMPLETED,\n  [COMPLETED]: DUE,\n};\n\nconst getNextStatus = (currentStatus) => {\n  return nextStatus[currentStatus];\n};\n\nconst getDefaultStatus = () => DUE;\n\nexport { getDefaultStatus, getNextStatus };\n","import React, { useState } from \"react\";\nimport Input from \"./Input\";\n\nconst TasksHeading = (props) => {\n  const [editMode, setEditMode] = useState(false);\n\n  const handleValue = (value) => {\n    props.changeHeading(value);\n    setEditMode(false);\n  };\n\n  const { value } = props;\n  let heading = <h1 onClick={() => setEditMode(true)}>{props.value}</h1>;\n  if (editMode) {\n    heading = (\n      <Input\n        className=\"titleInput\"\n        initialValue={value}\n        handleValue={handleValue}\n      />\n    );\n  }\n  return heading;\n};\n\nexport default TasksHeading;\n","import React, { useState } from \"react\";\nimport \"./todo.css\";\nimport Input from \"./Input\";\nimport TaskList from \"./TaskList\";\nimport { getDefaultStatus, getNextStatus } from \"./status\";\nimport TasksHeading from \"./TasksHeading\";\nimport WithDelete from \"./WithDelete\";\n\nconst Todo = (props) => {\n  const [heading, setHeading] = useState(props.heading);\n  const [tasks, setTasks] = useState([]);\n  const [lastTodoId, setLastTodoId] = useState(0);\n\n  const createNewTask = (message, id) => {\n    return {\n      message,\n      status: getDefaultStatus(),\n      taskId: id,\n    };\n  }; // gives a task object\n\n  const saveTask = (message) => {\n    setTasks((tasks) => {\n      const task = createNewTask(message, lastTodoId);\n      return [...tasks, task];\n    });\n    setLastTodoId((lastTodoId) => lastTodoId + 1);\n  }; // saves task in state\n\n  const toggleTaskStatus = (taskId) => {\n    setTasks((tasks) => {\n      const tasksCopy = tasks.map((task) => ({ ...task })); // Deep cloning the tasks\n      const taskToUpdate = tasksCopy.find((task) => task.taskId === taskId); // finding task to toggle\n      taskToUpdate.status = getNextStatus(taskToUpdate.status); // get next status\n      return tasksCopy; // update the state\n    });\n  };\n\n  const changeHeading = (value) => {\n    setHeading(value);\n  };\n\n  const deleteTasks = () => {\n    setTasks([]);\n    setLastTodoId(0);\n    setHeading(props.heading);\n  };\n\n  const filterTasks = (tasks, taskId) => {\n    const tasksCopy = tasks.map((task) => ({ ...task })); // Deep cloning\n    const updatedTasks = tasksCopy.filter((task) => task.taskId !== taskId); // filtering tasks to not delete\n    return updatedTasks; // updating tasks\n  };\n\n  const deleteTask = (taskId) => {\n    setTasks((prevTasks) => filterTasks(prevTasks, taskId));\n  };\n\n  const HeadingWithDelete = WithDelete(TasksHeading, deleteTasks);\n\n  return (\n    <div className=\"todo\">\n      <HeadingWithDelete value={heading} changeHeading={changeHeading} />\n      <TaskList\n        tasks={tasks}\n        handleStatus={toggleTaskStatus}\n        deleteTask={deleteTask}\n      />\n      <Input className=\"taskInput\" initialValue=\"\" handleValue={saveTask} />\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport \"./App.css\";\nimport Todo from \"./Components/Todo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo heading=\"Todo\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}